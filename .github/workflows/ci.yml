name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run linter
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run --timeout=5m
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./... || true
    
    - name: Generate coverage report
      run: |
        if [ -f coverage.out ]; then
          go tool cover -html=coverage.out -o coverage.html
        fi

  build:
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build binary
      run: |
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-s -w" -o subdomain-finder-${{ matrix.os }}-${{ matrix.arch }} .
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: subdomain-finder-${{ matrix.os }}-${{ matrix.arch }}
        path: subdomain-finder-${{ matrix.os }}-${{ matrix.arch }}

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: subdomain-finder:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'

  release:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create release archive
      run: |
        mkdir -p release
        find . -name "subdomain-finder-*" -type f -exec cp {} release/ \;
        cd release
        tar -czf subdomain-finder-binaries.tar.gz *
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/subdomain-finder-binaries.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
